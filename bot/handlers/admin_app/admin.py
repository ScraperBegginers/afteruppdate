from aiogram import types, Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from utils.generate_code import generate_referral_code
from handlers.admin_app.admin_kb_inl import channels_title_name_kb_inl
from config import ADMIN_ID
from handlers.admin_app.admin_kb_def import create_admin_keyboard, create_back_to_admin, manage_channels_kb_def
from handlers.admin_app.admin_middlewaries import BotAdminCheckMiddleware
from handlers.admin_app.mailing_script import start_mailing_to_users
from models import HistoryReferralLinks, ReferralLinks, User
from utils.api_requests import add_channel, def_channel, get_all_channels
from aiogram.exceptions import TelegramAPIError
from tortoise.functions import Count

router = Router()

router.message.outer_middleware(BotAdminCheckMiddleware(ADMIN_ID))
router.callback_query.outer_middleware(BotAdminCheckMiddleware(ADMIN_ID))

@router.message(F.text == '–ù–∞–∑–∞–¥')
@router.message(Command('admin'))
async def admin_panel(message: types.Message, state: FSMContext):
    await state.clear()

    all_users = await User.all().count()
    await message.answer('<b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n'
                         f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {all_users}',
                         reply_markup=create_admin_keyboard())

@router.message(F.text == '–†–∞—Å—Å—ã–ª–∫–∞')
async def enter_message_for_mailing(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ/—Ñ–æ—Ç–æ/gid/—Ñ–∞–π–ª –∏–ª–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ –≤ —Ä–∞—Å—Å—ã–ª–∫—É\n'
                         '- –†–∞–∑–º–µ—Ç–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è',
                         reply_markup=create_back_to_admin())
    await state.set_state('mailing_to_1')

@router.message(F.content_type, StateFilter('mailing_to_1'))
async def start_mailing(message: types.Message, state: FSMContext):
    await start_mailing_to_users(message=message)
    await state.clear()
    
@router.message(F.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏')
async def manage_channels(message: types.Message, state: FSMContext):
    all_channels = get_all_channels()
    view_channels = [f'{channel["link"]}' for channel in all_channels]
    await message.answer('–í—Å–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫:\n\n'
                         f'{"\n".join(view_channels)}', disable_web_page_preview=False, reply_markup=manage_channels_kb_def())
                         
@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª')
async def enter_new_channel(message: types.Message, state: FSMContext):
    await message.answer('–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, —á—Ç–æ –±—ã —è –º–æ–≥ –µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å', reply_markup=create_back_to_admin())
    await state.set_state('enter_channel_state')
    
@router.message(StateFilter('enter_channel_state'))
async def add_new_channel(message: types.Message, state: FSMContext):
    if not message.forward_from_chat:
        await message.answer("–≠—Ç–æ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=create_back_to_admin())
        return

    chat_id = message.forward_from_chat.id 
    chat_title = message.forward_from_chat.title

    try:
        admins = await message.bot.get_chat_administrators(chat_id)
        bot_id = await message.bot.me()

        is_bot_admin = any(admin.user.id == bot_id.id for admin in admins)
        if not is_bot_admin:
            await message.answer(f"–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ '{chat_title}'. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        invite_link = await message.bot.export_chat_invite_link(chat_id)
        add_channel(channel_id=chat_id, channel_link=invite_link)

        await message.answer(
            f"‚úÖ –Ø —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª –∫–∞–Ω–∞–ª <b>{chat_title}</b>!\n"
            f"ID –∫–∞–Ω–∞–ª–∞: <code>{chat_id}</code>\n"
            f"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {invite_link}",
            reply_markup=create_admin_keyboard()
        )
    except TelegramAPIError as e:
        await message.answer(f"–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                              reply_markup=create_admin_keyboard())
    finally:
        await state.clear()
        
@router.message(F.text == '–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª')
async def enter_chat_for_delete(message: types.Message, state: FSMContext):
    all_channels = get_all_channels()
    
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
                         reply_markup=channels_title_name_kb_inl(all_channels=all_channels))
    
@router.callback_query(F.data.startswith('channel_del_'))
async def delete_channel(call: types.CallbackQuery, state: FSMContext):
    channel_for_delete = call.data.removeprefix('channel_del_')
    def_channel(channel_for_delete)
    
    all_channels = get_all_channels()
    
    await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
                                  reply_markup=channels_title_name_kb_inl(all_channels=all_channels))


@router.message(F.text == '–°–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É')
async def create_referral_link(message: types.Message, state: FSMContext):
    bot_me = await message.bot.get_me()
    referral_code = generate_referral_code(bot_name=bot_me.username)
    await ReferralLinks(link=referral_code.split('=')[-1]).save()
    
    await message.answer(f'–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {referral_code}')
    
@router.message(F.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º')
async def check_statisctic(message: types.Message):
    stats = await HistoryReferralLinks.all() \
        .group_by("link") \
        .annotate(count=Count("link")) \
        .values("link", "count")

    if not stats:
        await message.answer("–ü–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º —Å—Å—ã–ª–∫–∞–º –ø–æ–∫–∞ –Ω–µ—Ç.")
        return


    response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º —Å—Å—ã–ª–∫–∞–º:\n\n"
    for stat in stats:
        response += f"üîó {stat['link']} - {stat['count']} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤\n"

    await message.answer(response)